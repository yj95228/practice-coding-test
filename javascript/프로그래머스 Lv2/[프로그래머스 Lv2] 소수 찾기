// https://school.programmers.co.kr/learn/courses/30/lessons/42839?language=javascript

function solution(numbers) {
    const numArray = numbers.split('')
    const numList = []
    for(let r = 1; r <= numArray.length; r++){
        numList.push(...permutation(numArray,r))
    }
    const canMakeNumList = numList.map(x => Number(x.join('')))
    return [...new Set(canMakeNumList)].filter(x => isPrime(x)).length
}

function permutation(arr, r) {
  const result = [];
  if (r === 1) return arr.map((num) => [num]);
  arr.forEach((fixed, index, org) => {
    const rest = [...org.slice(0, index), ...org.slice(index + 1)];
    const permutations = permutation(rest, r - 1);
    const attached = permutations.map((numbers) => [fixed, ...numbers]);
    result.push(...attached);
  });
  return result;
}

function isPrime(num) {
    if(num === 0 || num === 1) return false
    for(let n = 2; n < num; n++){
        if(num%n === 0) return false
    }
    return true
}
