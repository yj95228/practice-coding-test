function solution(record) {
    const recordsArray = record.map(r => {
        tmp = r.split(':');
        return Array(tmp[0],...tmp[1].split(",").map(Number))
    })

    const record1 = [];
    const record2 = [];
    const record3 = [];
    const record4 = [];
    const record5 = [];

    recordsArray.forEach(record => {
        record1.push(record[1])
        record2.push(record[2])
        record3.push(record[3])
        record4.push(record[4])
        record5.push(record[5])
    })

    const recordList = [record1, record2, record3, record4, record5]
    const completeList = recordList.map(record => record.filter(t => t !== 0))
    const playerCount = completeList.map(record => record.length);

    const rank1 = playerCount.map(num => Math.round(num/12,1));
    const rank2 = playerCount.map(num => Math.round(num/4,1));
    const rank3 = playerCount.map(num => Math.round(num/2,1));

    const rank1List = [[],[],[],[],[]];
    const rank2List = [[],[],[],[],[]];
    const rank3List = [[],[],[],[],[]];

    completeList.map(x => x.sort((a,b) => a-b))
    completeList.forEach((course,idx) => {
        for(let i = 0; i < rank1[idx]; i++){
            rank1List[idx] = [...rank1List[idx], course[i]]
        }
        for(let i = rank1[idx]; i < rank2[idx]; i++){
            rank2List[idx] = [...rank2List[idx], course[i]]
        }
        for(let i = rank2[idx]; i < rank3[idx]; i++){
            rank3List[idx] = [...rank3List[idx], course[i]]
        }
    })

    recordsArray.forEach(record => {
        let records = [...record];
        records.shift();
        completeRecord = records.filter(t => t !== 0);
        const maxLength = completeRecord.length; // 1순위 : 완주한 코스 수 (DESC)
        const hardRecord = records.indexOf(completeRecord[completeRecord.length-1],4); // 2순위 : 완주한 코스 난이도 (DESC)
        const rank1count = records.map((t,idx) => rank1List[idx].includes(t)).filter(x => x === true).length // 3순위 : 금메달 개수 (DESC)
        const rank2count = records.map((t,idx) => rank2List[idx].includes(t)).filter(x => x === true).length // 4순위 : 은메달 개수 (DESC)
        const rank3count = records.map((t,idx) => rank3List[idx].includes(t)).filter(x => x === true).length // 5순위 : 동메달 개수 (DESC)
        const recordSum = records.reduce((prev,curr) => prev + curr)  // 6순위 : 기록 합 (ASC)
        record.push([maxLength,hardRecord,rank1count,rank2count,rank3count,recordSum])
    })

    recordsArray.sort((a,b) => {
        // 1순위 : 완주한 코스 수 (DESC)
        if(a[6][0] < b[6][0]) return 1
        if(a[6][0] > b[6][0]) return -1
        
        // 2순위 : 완주한 코스 난이도 (DESC)
        if(a[6][1] < b[6][1]) return 1
        if(a[6][1] > b[6][1]) return -1

        // 3순위 : 금메달 개수 (DESC)
        if(a[6][2] < b[6][2]) return 1
        if(a[6][2] > b[6][2]) return -1

        // 4순위 : 은메달 개수 (DESC)
        if(a[6][3] < b[6][3]) return 1
        if(a[6][3] > b[6][3]) return -1

        // 5순위 : 동메달 개수 (DESC)
        if(a[6][4] < b[6][4]) return 1
        if(a[6][4] > b[6][4]) return -1

        // 6순위 : 기록 합 (ASC)
        if(a[6][5] < b[6][5]) return -1
        if(a[6][5] > b[6][5]) return 1

        // 7순위 : 기록 합 (ASC)
        if(a[0] < b[0]) return -1
        if(a[0] > b[0]) return 1
    })
    return recordsArray.map(player => player[0]);
