class Node {
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}


function initTree() {
  let root = new Node(7);
  let node_3 = new Node(3);
  let node_10 = new Node(10);
  root.left = node_3;
  root.right = node_10;

  let node_1 = new Node(1);
  let node_5 = new Node(5);
  node_3.left = node_1;
  node_3.right = node_5;

  let node_4 = new Node(4);
  node_5.left = node_4;
  
  let node_12 = new Node(12);
  node_4.left = node_12;

  let node_8 = new Node(8);
  node_10.left = node_8;

  return root;
}


function pre_order(node, depth) {
  depth++;
  if (node === null) {
    return;
  }
  console.log(depth, node.data);
  pre_order(node.left, depth);
  pre_order(node.right, depth);
}


function in_order(node) {
  if (node === null) {
    return;
  }
  in_order(node.left);
  console.log(node.data);
  in_order(node.right);
}


function post_order(node) {
  if (node === null) {
    return;
  }
  post_order(node.left);
  post_order(node.right);
  console.log(node.data);
}


const root = initTree();
let depth = 0;
pre_order(root, depth);
// in_order(root);
// post_order(root);
